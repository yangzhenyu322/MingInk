version: '3'
services:
  mysql:
    image: mysql # 使用的镜像
    container_name: mysql # 启动的示例名称
    restart: always # 崩溃后自动重启
    ports:
      - "3306:3306" # 端口映射
    environment:
      TZ: Asia/Shanghai # 控制时区
      MYSQL_ROOT_PASSWORD: lovelumine # mysql root用户密码
    volumes:
      - /usr/soft/docker/mingink/mysql/data:/var/lib/mysql # 将数据目录挂载到本地目录以进行持久化
      - /usr/soft/docker/mingink/mysql/conf:/etc/mysql/conf.d # 挂载配置文件目录, 未成功？
      - ./env/mysql/mysql-init:/docker-entrypoint-initdb.d # 启动脚本（创建容器后会自动执行建表语句）
    networks:
      - mynetwork # 指定网络

  redis:
    image: redis:6.2.14
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    environment:
      TZ: Asia/Shanghai
    volumes:
      - /usr/soft/docker/mingink/redis/data:/data # 数据目录
      - ./env/redis/redis.conf:/usr/local/etc/redis/redis.conf # 配置文件
      - /usr/soft/docker/mingink/redis/logs:/logs # 日志, 未成功？
    # 配置文件启动
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - mynetwork

  nacos:
    image: nacos/nacos-server:v2.2.3
    container_name: nacos
    restart: always
    ports:
      - "8848:8848"
      - "9848:9848"
    environment:
      TZ: Asia/Shanghai
    env_file:
      - env/nacos/nacos.env # nacos配置
    volumes:
      - /usr/soft/docker/mingink/nacos/logs:/home/nacos/logs # 日志
    networks:
      - mynetwork

  # 如果需要重新部署rabbitmq，需要先清除data中的数据
  # 参考：https://developer.aliyun.com/article/1365245, 需要下载对应版本的延迟插件并放到myplugins目录下，
  # 然后执行插件安装命令 docker exec -it rabbitmq /bin/bash -c "rabbitmq-plugins enable rabbitmq_delayed_message_exchange"
  rabbitmq:
    image: rabbitmq:3.12.6-management
    container_name: rabbitmq
    hostname: rabbitmq-server
    restart: always
    ports:
      - "5672:5672" # 应用连接端口
      - "15672:15672" # web管理端口
    environment:
      TZ: Asia/Shanghai
      # 默认虚拟机名
      RABBITMQ_DEFAULT_VHOST: admin_vhost
      # 用户名
      RABBITMQ_DEFAULT_USER: zensheep
      # 密码
      RABBITMQ_DEFAULT_PASS: zensheep
      # 指定自定义插件目录
      RABBITMQ_PLUGINS_DIR: '/plugins:/myplugins'
    volumes:
      - /usr/soft/docker/mingink/rabbitmq/data:/var/lib/rabbitmq
      - /usr/soft/docker/mingink/rabbitmq/myplugins:/myplugins
    networks:
      - mynetwork

  sentinel:
    container_name: sentinel
    restart: always
    build:
      context: ./env/sentinel
      dockerfile: Dockerfile
    ports:
      - "8858:8858"
      - "8719:8719"
    volumes:
      - /usr/soft/docker/mingink/sentinel/logs:/root/logs
    networks:
      - mynetwork

  seata-server-prod:
    image: seataio/seata-server:2.0.0
    container_name: seata-server-prod
    restart: always
    ports:
      - "7091:7091" # 控制台
      - "8091:8091" # seata-server服务
    environment:
      - TZ=Asia/Shanghai
      # 指定seata服务启动端口
      - SEATA_PORT=8091
      # 注册到nacos上的ip。客户端将通过该ip访问seata服务(nacos里显示的配置)
      # 注意公网ip和内网ip的差异。
      - SEATA_IP=223.82.75.76
    volumes:
      - ./env/seata-server/prod/application.yml:/seata-server/resources/application.yml # 配置文件
    networks:
      - mynetwork

  seata-server-dev:
    image: seataio/seata-server:2.0.0
    container_name: seata-server-dev
    restart: always
    ports:
      - "7092:7092" # 控制台
      - "8092:8092" # seata-server服务
    environment:
      - TZ=Asia/Shanghai
      # 指定seata服务启动端口
      - SEATA_PORT=8092
      # 注册到nacos上的ip。客户端将通过该ip访问seata服务(nacos里显示的配置)
      # 注意公网ip和内网ip的差异。
      - SEATA_IP=223.82.75.76
    volumes:
      - ./env/seata-server/dev/application.yml:/seata-server/resources/application.yml # 配置文件
    networks:
      - mynetwork

  minio:
    image: minio/minio
    container_name: minio
    restart: always
    ports:
      - "9000:9000" # API
      - "9001:9001" # 控制台
    environment:
      - TZ=Asia/Shanghai
      - MINIO_ACCESS_KEY=lovelumine
      - MINIO_SECRET_KEY=lovelumine90
    volumes:
      - /usr/soft/docker/mingink/minio/data:/data
      - /usr/soft/docker/mingink/minio/config:/root/.minio
    command: server --console-address ":9001" /data # 指定服务端口和控制台端口
    networks:
      - mynetwork

  gorse:
    image: zhenghaoz/gorse-in-one
    container_name: gorse
    restart: always
    ports:
      - "8086:8086" # gRPC port
      - "8088:8088" # HTTP port
    environment:
      TZ: Asia/Shanghai
      # Use Redis as cache storage backend.
      GORSE_CACHE_STORE: redis://:lovelumine78@redis:6379/1
      # Use MySQL as data storage backend.
      GORSE_DATA_STORE: mysql://root:lovelumine@tcp(mysql:3306)/mingink?parseTime=true
    volumes:
      - ./env/gorse/config.toml:/etc/gorse/config.toml # 配置文件
      - /usr/soft/docker/mingink/gorse/logs:/var/log/gorse # 日志
    networks:
      - mynetwork
    depends_on:
      - mysql
      - redis

# 网络，不定义的话就是默认网络
networks:
  mynetwork: # 自定义网络，实现网络互通和隔离
    driver: bridge